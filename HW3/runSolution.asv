function [Rho,t_c] = runSolution(scenario, rho_x_0, rho_max, u_max, Mesh)

    Rho = zeros(Mesh.Nx, Mesh.Nt);

    Rho(:,1) = rho_x_0;
    
    f   =  @(rho) u_max * (rho - rho.^2/rho_max); 
    df  =  @(rho) u_max * (1 - 2*rho/rho_max);
    ddf =  - 2 * u_max/rho_max;
    
    d_rho = ( rho_x_0(2:end) - rho_x_0(1:end-1) ) / Mesh.dx;
    
    t_c = min(abs(d_rho.*ddf));
    fprintf('Solution valid up to time t_c = %.3f s \n', t_c);
    
    for n = 1:Mesh.Nt-1        % rho contains the value for t=0 and is already computed
        
        % Apply boundary conditions appropriate for the scenario
        switch scenario
            case 'Traffic jam'
                % Fixed boundary conditions
                Rho(1,n) = rho_x_0(1);
                Rho(end, n) = rho_x_0(end);
            case 'Green Light'
                % Fixed left boundary, free outflow right boundary
                Rho(1, n) = rho_x_0(1);
                % Free outflow (x=L) will be handled in the main loop
            case 'Traffic flow'
                 % Fixed left boundary, free outflow right boundary
                 Rho(1, n) = rho_x_0(1);
                 % Free outflow will be handled in the main loop
        end


        for i = 2:Mesh.Nx-1  % rho contains the value for x = {0 , L} and they stay constant
           
            % Update rule for the right cell
            if Rho(i,n) <= Rho(i+1,n)
                % Rarefaction wave
                fR = min( f(Rho(i,n)) ,  f(Rho(i+1,n)) );
            else
                % Shock wave
                fR = max( f(Rho(i,n)) ,  f(Rho(i+1,n)) );
            end
    
            % Update rule for the left cell
            if Rho(i-1,n) <= Rho(i,n)
                % Rarefaction wave
                fL = min( f(Rho(i,n)) ,  f(Rho(i-1,n)) );
            else 
                % Shock wave
                fL = max( f(Rho(i,n)) ,  f(Rho(i-1,n)) );
            end
    
            Rho(i,n+1) = Rho(i,n) - Mesh.dt/Mesh.dx * (fR - fL);
        end
    
        % Apply right boundary condition based on scenario
        switch scenario
            case 'Traffic jam'
                % Already set in the beginning of the loop
                
            case 'Green light'
                % Free outflow boundary condition
                Rho(end, n+1) = rRho(end-1, n+1);
                
            case 'Traffic Flow'
                % Free outflow boundary condition
                Rho(end, n+1) = Rho(end-1, n+1);
            otherwise
                error('Unrecognized scenario');
        end

        % Apply left boundary condition to the new time step
        Rho(1, n+1) = Rho(1, n);
            % % Boundary conditions
            % if strcmp(scenario, 'Traffic jam')
            %     Rho(1,n+1)    = Rho(1,1);         % BC at x = 0
            %     Rho(end,n+1)  = Rho(end,1);       % BC at x = L
            % 
            % elseif strcmp(scenario,'Green light')
            %     Rho(1,n+1)    = Rho(1,1);         % BC at x = 0
            %     Rho(end,n+1)  = Rho(end-1,n+1);   % BC at x = L
            % 
            % elseif strcmp(scenario, 'Traffic flow')
            %     % TO CHECK MY MAN BE CAREFUL
            %     Rho(1,n+1)    = Rho(1,1);         % BC at x = 0
            %     Rho(end,n+1)  = Rho(end-1,n+1);   % BC at x = L
            % else
            %     error('Unrecognized scenarion')
            % end
    end
end