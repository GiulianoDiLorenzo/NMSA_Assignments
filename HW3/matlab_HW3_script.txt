clc; clear; close all;

%% Parameters
L = 1; % Length of the road
T = 1; % Total simulation time
Nx = 100; % Number of spatial points
Nt = 200; % Number of time steps
rho_max = 1; % Maximum density (normalized)
u_max = 1; % Maximum speed

%% Discretization
dx = L / Nx; % Spatial step
dt = T / Nt; % Time step (CFL condition should be checked)
x = linspace(0, L, Nx); % Spatial grid

%% Initial Conditions - Select Scenario
scenario = 'TrafficJam'; % 'TrafficJam', 'GreenLight', 'TrafficFlow'
switch scenario
    case 'TrafficJam'
        rho = (x >= 0.5) * rho_max;
    case 'GreenLight'
        rho_R = 0.5 * rho_max;
        rho_L = 0.2 * rho_max;
        rho = (x >= 0.5) * rho_R + (x < 0.5) * rho_L;
    case 'TrafficFlow'
        rho_R = 0.5 * rho_max;
        rho_L = rho_max;
        rho = (x >= 0.5) * rho_R + (x < 0.5) * rho_L;
end

%% Select Method
method = 'Godunov'; % 'Godunov' or 'Lax-Wendroff'

if strcmp(method, 'Godunov')
    %% Godunov Scheme
    for n = 1:Nt
        rho_new = rho;
        for i = 1:Nx-1
            % Define left and right states at interface
            rho_L = rho(i);
            rho_R = rho(i+1);
            
            % Compute flux function
            f = @(r) r .* u_max .* (1 - r / rho_max);
            
            % Compute wave speed
            a_L = u_max * (1 - 2 * rho_L / rho_max);
            a_R = u_max * (1 - 2 * rho_R / rho_max);
            
            % Godunov flux determination
            if a_L > 0
                F = f(rho_L);
            elseif a_R < 0
                F = f(rho_R);
            else
                rho_star = max(rho_L, rho_R); % Approximate intermediate state
                F = f(rho_star);
            end
            
            % Update density
            rho_new(i) = rho(i) - dt/dx * (F - f(rho_L));
        end
        
        % Apply periodic or outflow boundary condition
        rho_new(end) = rho_new(end-1);
        
        % Update solution
        rho = rho_new;
        
        % Visualization
        if mod(n, 10) == 0
            plot(x, rho, 'b', 'LineWidth', 1.5);
            ylim([0, rho_max]);
            xlabel('x'); ylabel('Density');
            title(['Godunov Scheme - Time step ', num2str(n)]);
            drawnow;
        end
    end
else
    %% Lax-Wendroff Scheme
    for n = 1:Nt
        rho_new = rho;
        for i = 2:Nx-1
            % Compute flux function
            f = @(r) r .* u_max .* (1 - r / rho_max);
            df = @(r) u_max .* (1 - 2 * r / rho_max); % Derivative of f
            
            % Lax-Wendroff update
            rho_new(i) = rho(i) - dt/(2*dx) * (f(rho(i+1)) - f(rho(i-1))) + ...
                (dt^2 / (2*dx^2)) * (df(rho(i)) * (f(rho(i+1)) - 2*f(rho(i)) + f(rho(i-1))));
        end
        
        % Apply periodic or outflow boundary condition
        rho_new(1) = rho_new(2);
        rho_new(end) = rho_new(end-1);
        
        % Update solution
        rho = rho_new;
        
        % Visualization
        if mod(n, 10) == 0
            plot(x, rho, 'r', 'LineWidth', 1.5);
            ylim([0, rho_max]);
            xlabel('x'); ylabel('Density');
            title(['Lax-Wendroff Scheme - Time step ', num2str(n)]);
            drawnow;
        end
    end
end
